package com.restaurant.contract;

import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.*;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple10;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple9;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class ProductRecord extends Contract {
    public static final String[] BINARY_ARRAY = {"","60c08083015186830382880152610ff68382610c6d565b9250505060e080830151868303828801526110118382610c6d565b92505050610100808301518683038288015261102d8382610c6d565b92505050610120808301519250858203818701525061104c8183610c6d565b968901969450505090860190600101610f64565b509098975050505050505050565b600181811c9082168061108257607f821691505b602082108114156110a357634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156110cb57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fdfea264697066735822122050b9acdbfcb57d5e79d71700d8ebec21c1913327b55bbcf20f56c003b0214aa664736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","90508281036080840152610ff3818a610e3b565b905082810360a08401526110078189610e3b565b905082810360c084015261101b8188610e3b565b905082810360e084015261102f8187610e3b565b90508281036101008401526110448186610e3b565b90508281036101208401526110598185610e3b565b9d9c50505050505050505050505050565b600060001982141561108c5763b95aa35560e01b600052601160045260246000fd5b5060010190565b600181811c908216806110a757607f821691505b602082108114156110c85763b95aa35560e01b600052602260045260246000fd5b50919050565b63b95aa35560e01b600052603260045260246000fdfea264697066735822122000440aab803afddd9a359f0ebf9cec814adea0bb1d6483403bb7c9caf5fab78564736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"RecordAdded\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[1]}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"temperature\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"illumination\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"remark\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pictureIpfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"water\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"growthSituation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordTime\",\"type\":\"string\"}],\"name\":\"addRecord\",\"outputs\":[],\"selector\":[2072352407,2571920863],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[1]}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"}],\"name\":\"getRecordsByProductId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"temperature\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"illumination\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"remark\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pictureIpfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"water\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"growthSituation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordTime\",\"type\":\"string\"}],\"internalType\":\"struct ProductRecord.Record[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"selector\":[3976091402,2771764578],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1]}],\"inputs\":[],\"name\":\"lastBlockId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"selector\":[3265537291,1746844831],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":0,\"value\":[0]}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"temperature\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"illumination\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"remark\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pictureIpfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"water\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"growthSituation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordTime\",\"type\":\"string\"}],\"selector\":[877006951,3361798238],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDRECORD = "addRecord";

    public static final String FUNC_GETRECORDSBYPRODUCTID = "getRecordsByProductId";

    public static final String FUNC_LASTBLOCKID = "lastBlockId";

    public static final String FUNC_RECORDS = "records";

    public static final Event RECORDADDED_EVENT = new Event("RecordAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected ProductRecord(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<RecordAddedEventResponse> getRecordAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RECORDADDED_EVENT, transactionReceipt);
        ArrayList<RecordAddedEventResponse> responses = new ArrayList<RecordAddedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RecordAddedEventResponse typedResponse = new RecordAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.productId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.userId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt addRecord(BigInteger productId, BigInteger userId, String temperature,
                                        String illumination, String remark, String pictureIpfsHash, String water,
                                        String growthSituation, String recordTime) {
        final Function function = new Function(
                FUNC_ADDRECORD,
                Arrays.<Type>asList(new Uint256(productId),
                        new Uint256(userId),
                        new Utf8String(temperature),
                        new Utf8String(illumination),
                        new Utf8String(remark),
                        new Utf8String(pictureIpfsHash),
                        new Utf8String(water),
                        new Utf8String(growthSituation),
                        new Utf8String(recordTime)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAddRecord(BigInteger productId, BigInteger userId,
                                                   String temperature, String illumination, String remark, String pictureIpfsHash,
                                                   String water, String growthSituation, String recordTime) {
        final Function function = new Function(
                FUNC_ADDRECORD,
                Arrays.<Type>asList(new Uint256(productId),
                        new Uint256(userId),
                        new Utf8String(temperature),
                        new Utf8String(illumination),
                        new Utf8String(remark),
                        new Utf8String(pictureIpfsHash),
                        new Utf8String(water),
                        new Utf8String(growthSituation),
                        new Utf8String(recordTime)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String addRecord(BigInteger productId, BigInteger userId, String temperature,
                            String illumination, String remark, String pictureIpfsHash, String water,
                            String growthSituation, String recordTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDRECORD,
                Arrays.<Type>asList(new Uint256(productId),
                        new Uint256(userId),
                        new Utf8String(temperature),
                        new Utf8String(illumination),
                        new Utf8String(remark),
                        new Utf8String(pictureIpfsHash),
                        new Utf8String(water),
                        new Utf8String(growthSituation),
                        new Utf8String(recordTime)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple9<BigInteger, BigInteger, String, String, String, String, String, String, String> getAddRecordInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple9<BigInteger, BigInteger, String, String, String, String, String, String, String>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue()
        );
    }

    public List<Record> getRecordsByProductId(BigInteger productId) throws ContractException {
        final Function function = new Function(FUNC_GETRECORDSBYPRODUCTID,
                Arrays.<Type>asList(new Uint256(productId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Record>>() {}));
        return executeCallWithSingleValueReturn(function, List.class);
    }

    public BigInteger lastBlockId() throws ContractException {
        final Function function = new Function(FUNC_LASTBLOCKID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple10<BigInteger, BigInteger, BigInteger, String, String, String, String, String, String, String> records(
            BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_RECORDS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, BigInteger, BigInteger, String, String, String, String, String, String, String>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (String) results.get(9).getValue());
    }

    public static ProductRecord load(String contractAddress, Client client,
                                     CryptoKeyPair credential) {
        return new ProductRecord(contractAddress, client, credential);
    }

    public static ProductRecord deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(ProductRecord.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public static class Record extends DynamicStruct {
        public BigInteger blockId;

        public BigInteger productId;

        public BigInteger userId;

        public String temperature;

        public String illumination;

        public String remark;

        public String pictureIpfsHash;

        public String water;

        public String growthSituation;

        public String recordTime;


        public Record(BigInteger blockId, BigInteger productId, BigInteger userId,
                      String temperature, String illumination, String remark, String pictureIpfsHash,
                      String water, String growthSituation, String recordTime) {
            super(new Uint256(blockId),new Uint256(productId),new Uint256(userId),new Utf8String(temperature),new Utf8String(illumination),new Utf8String(remark),new Utf8String(pictureIpfsHash),new Utf8String(water),new Utf8String(growthSituation),new Utf8String(recordTime));
            this.blockId = blockId;
            this.productId = productId;
            this.userId = userId;
            this.temperature = temperature;
            this.illumination = illumination;
            this.remark = remark;
            this.pictureIpfsHash = pictureIpfsHash;
            this.water = water;
            this.growthSituation = growthSituation;
            this.recordTime = recordTime;
        }
        public Record(Uint256 blockId, Uint256 productId, Uint256 userId, Utf8String temperature,
                      Utf8String illumination, Utf8String remark, Utf8String pictureIpfsHash,
                      Utf8String water, Utf8String growthSituation, Utf8String recordTime) {
            super(blockId,productId,userId,temperature,illumination,remark,pictureIpfsHash,water,growthSituation,recordTime);
            this.blockId = blockId.getValue();
            this.productId = productId.getValue();
            this.userId = userId.getValue();
            this.temperature = temperature.getValue();
            this.illumination = illumination.getValue();
            this.remark = remark.getValue();
            this.pictureIpfsHash = pictureIpfsHash.getValue();
            this.water = water.getValue();
            this.growthSituation = growthSituation.getValue();
            this.recordTime = recordTime.getValue();
        }

        public BigInteger getBlockId() {
            return blockId;
        }

        public void setBlockId(BigInteger blockId) {
            this.blockId = blockId;
        }

        public BigInteger getProductId() {
            return productId;
        }

        public void setProductId(BigInteger productId) {
            this.productId = productId;
        }

        public BigInteger getUserId() {
            return userId;
        }

        public void setUserId(BigInteger userId) {
            this.userId = userId;
        }

        public String getTemperature() {
            return temperature;
        }

        public void setTemperature(String temperature) {
            this.temperature = temperature;
        }

        public String getIllumination() {
            return illumination;
        }

        public void setIllumination(String illumination) {
            this.illumination = illumination;
        }

        public String getRemark() {
            return remark;
        }

        public void setRemark(String remark) {
            this.remark = remark;
        }

        public String getPictureIpfsHash() {
            return pictureIpfsHash;
        }

        public void setPictureIpfsHash(String pictureIpfsHash) {
            this.pictureIpfsHash = pictureIpfsHash;
        }

        public String getWater() {
            return water;
        }

        public void setWater(String water) {
            this.water = water;
        }

        public String getGrowthSituation() {
            return growthSituation;
        }

        public void setGrowthSituation(String growthSituation) {
            this.growthSituation = growthSituation;
        }

        public String getRecordTime() {
            return recordTime;
        }

        public void setRecordTime(String recordTime) {
            this.recordTime = recordTime;
        }
    }

    public static class RecordAddedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger blockId;

        public BigInteger productId;

        public BigInteger userId;
    }
}